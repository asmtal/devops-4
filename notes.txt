//place of the volumes
kubectl get storageclass

//get persistance volumes
kubectl get pv

kubectl get pvc

//create secret
kubectl create secret generic dbpassword --from-literal DB_PASSWORD=1234

kubectl get secrets

kubectl get namespaces
kubectl create namespace cert-manager

kubectl get certificates

kubectl get nodes

kubectl get pods -o wide

kubectl edit pod <podname>

kubectl port-forward <pod> <port>:<port>

kubectl logs -f <pod> --tail=10

kubectl exec --stdin --tty <pod>-- /bin/bash

kubectl get pods -n <namespace>

kubectl cp <pod>:<file> <local_file>

kubectl get resourcequota -o yaml

kubectl scale deploy <deployment> --replicas=0

kubectl autoscale deployment <deployment_name> --min=1 --max=10

kubectl get pod <pod-name> -o yaml > pod-definition.yaml

kubectl get replicaset

kubectl replace -f <replicaset-definition.yml>
kubectl scale --replicas=6 -f <replicaset-definition.yml>
kubectl scale --replicas=6 replicaset <replicaset-name>

kubectl get all

kubectl config set-context $( kubectl config current-context) --namespace=dev

kubectl get pods --all-namespaces

kubectl run nginx --image=nginx  --dry-run=client -o yaml

kubectl create deployment --image=nginx nginx --dry-run -o yaml

kubectl get configmaps
kubectl describe configmaps

kubectl taint nodes node1 app=blue:NoSchedule

kubectl label node <nodename> size=Large

kubectl rollout status deployment/myapp-deployment

kubectl rollout history deployment/rest-client-replicaset
kubectl rollout history deployment/rest-client-replicaset --revision=3

kubectl set image deployment/myapp-deployment oldimage=newimage

kubectl describe deployment rest-client-replicaset

kubectl rollout undo deployment/rest-client-replicaset

kubectl get replicasets

kubectl get cronjob

HELM:

helm repo add jetstack https://charts.jetstack.io
helm repo update

helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.4.0 --create-namespace















